Insert a New Product
INSERT INTO Products (Name, SKU, Category, Quantity, UnitPrice, Barcode)
VALUES ('Product D', 'SKU004', 'Electronics', 150, 49.99, '1234567890126');

Update Product Quantity
UPDATE Products
SET Quantity = Quantity - 10
WHERE ProductID = 1;

Delete a Product
DELETE FROM Products
WHERE ProductID = 3;

Insert a New Supplier
INSERT INTO Suppliers (SupplierName, ContactName, Phone, Email, Address)
VALUES ('Supplier Three', 'Charlie Davis', '345-678-9012', 'charlie@supplierthree.com', '789 Pine St, City');


Retrieval Queries
Get All Products
SELECT * FROM Products;

Get Products by Category
SELECT * FROM Products
WHERE Category = 'Electronics';

Get Low Stock Products
SELECT * FROM Products
WHERE Quantity < 20;

Get All Suppliers
SELECT * FROM Suppliers;


Join Queries
Get Purchase Order Details
SELECT po.PurchaseOrderID, s.SupplierName, po.OrderDate, po.Status, pod.ProductID, p.Name AS ProductName, pod.Quantity, pod.UnitPrice
FROM PurchaseOrders po
JOIN PurchaseOrderDetails pod ON po.PurchaseOrderID = pod.PurchaseOrderID
JOIN Suppliers s ON po.SupplierID = s.SupplierID
JOIN Products p ON pod.ProductID = p.ProductID
WHERE po.PurchaseOrderID = 1;

Get Sales Order Details
SELECT so.SalesOrderID, so.CustomerName, so.OrderDate, so.Status, sod.ProductID, p.Name AS ProductName, sod.Quantity, sod.UnitPrice
FROM SalesOrders so
JOIN SalesOrderDetails sod ON so.SalesOrderID = sod.SalesOrderID
JOIN Products p ON sod.ProductID = p.ProductID
WHERE so.SalesOrderID = 1;


Advanced Queries
Get Total Inventory Value
SELECT SUM(Quantity * UnitPrice) AS TotalInventoryValue
FROM Products;

Get Stock Movement History
SELECT sm.MovementID, p.Name AS ProductName, sm.MovementType, sm.Quantity, sm.MovementDate, sm.Description
FROM StockMovements sm
JOIN Products p ON sm.ProductID = p.ProductID
ORDER BY sm.MovementDate DESC;

Get User Actions (Audit Logs)
SELECT al.LogID, u.Username, al.Action, al.TableAffected, al.ActionTime, al.Description
FROM AuditLogs al
JOIN Users u ON al.UserID = u.UserID
ORDER BY al.ActionTime DESC;

Get Products with Low Stock Alerts
SELECT p.ProductID, p.Name, p.Quantity, p.Category, (CASE WHEN p.Quantity < 10 THEN 'Low Stock' ELSE 'Sufficient Stock' END) AS StockStatus
FROM Products p;

Integration Queries
Get Inventory Valuation for Accounting Integration
SELECT p.ProductID, p.Name, p.Quantity, p.UnitPrice, (p.Quantity * p.UnitPrice) AS InventoryValue
FROM Products p;

Get Products for E-commerce Integration
SELECT p.ProductID, p.Name, p.SKU, p.Quantity, p.UnitPrice, p.Category, p.Barcode
FROM Products p;


